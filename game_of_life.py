# -*- coding: utf-8 -*-
"""Game of life.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13pSTLbANmoF87rzAIO6trGZOvJcBVdX6
"""

import random
import os
import time


def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')


def create_grid(rows, cols):
    return [[0 for _ in range(cols)] for _ in range(rows)]


def print_grid(grid):
    for row in grid:
        print(''.join('#' if cell else '.' for cell in row))


def count_neighbors(grid, row, col):
    neighbors = [
        (-1, -1), (-1, 0), (-1, 1),
        (0, -1),         (0, 1),
        (1, -1), (1, 0), (1, 1)
    ]
    count = 0
    num_rows, num_cols = len(grid), len(grid[0])

    for dr, dc in neighbors:
        # Wrap around using modulo
        r = (row + dr) % num_rows
        c = (col + dc) % num_cols
        count += grid[r][c]

    return count


def next_generation(grid):
    rows, cols = len(grid), len(grid[0])
    new_grid = create_grid(rows, cols)
    for row in range(rows):
        for col in range(cols):
            alive_neighbors = count_neighbors(grid, row, col)
            if grid[row][col] == 1:
                new_grid[row][col] = 1 if alive_neighbors in (2, 3) else 0
            else:
                new_grid[row][col] = 1 if alive_neighbors == 3 else 0
    return new_grid


def manually_place_cells(grid):
    print("Placez vos cellules vivantes dans la grille initiale.")
    print("Entrez les coordonnées sous la forme 'ligne colonne' (par ex., '2 3').")
    print("Tapez 'fin' pour terminer.")
    print_grid(grid)
    while True:
        user_input = input("Coordonnées (ou 'fin') : ").strip()
        if user_input.lower() == 'fin':
            break
        try:
            row, col = map(int, user_input.split())
            if 0 <= row < len(grid) and 0 <= col < len(grid[0]):
                grid[row][col] = 1
                print_grid(grid)
            else:
                print("Coordonnées hors de la grille. Réessayez.")
        except ValueError:
            print("Entrée invalide. Entrez deux nombres séparés par un espace.")


def main():
    rows, cols = 30, 30
    grid = create_grid(rows, cols)

    manually_place_cells(grid)

    print("Début de la simulation...")
    try:
        while True:
            clear_console()
            print_grid(grid)
            grid = next_generation(grid)
            time.sleep(0.5)
    except KeyboardInterrupt:
        print("\nSimulation arrêtée.")


if __name__ == "__main__":
    main()